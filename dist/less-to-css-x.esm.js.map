{"version":3,"sources":["../src/less-to-css-x.js"],"names":[],"mappings":"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","file":"less-to-css-x.esm.js","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport less from 'less';\nimport stylelint from 'stylelint';\nimport postcss from 'postcss';\nimport autoprefixer from 'autoprefixer';\nimport cssnano from 'cssnano';\nimport lessSyntax from 'postcss-less';\nimport prettier from 'prettier';\n\n/**\n * @param {string} source - The less source code.\n * @param {RenderOptions} options - The render options.\n * @returns {Promise<string>} - The bound function.\n */\nconst performLessFixes = function performLessFixes(source, options) {\n  if (options.noFix) {\n    /* eslint-disable-next-line compat/compat */\n    return Promise.resolve(source);\n  }\n\n  return postcss([stylelint({fix: true}), autoprefixer({overrideBrowserslist: []})])\n    .process(source, {\n      from: options.source,\n      syntax: lessSyntax,\n    })\n    .then(function writeFixes(result) {\n      if (options.dryRun === false) {\n        fs.writeFileSync(options.source, result.content);\n      }\n\n      return result.content;\n    });\n};\n\n/**\n * @param {RenderOptions} options - The render options.\n * @returns {function(string): !object} - The bound function.\n */\nconst renderLessToCss = function renderLessToCss(options) {\n  return function boundRenderLessToCss(lessInput) {\n    return less.render(lessInput, options.sourceMap ? {sourceMap: {}} : null);\n  };\n};\n\n/**\n * @param {RenderOptions} options - The render options.\n * @returns {function(!object): postcss.LazyResult} - The bound function.\n */\nconst performPostcss = function performPostcss(options) {\n  return function boundPerformPostcss(result) {\n    const plugins = options.minify ? [autoprefixer, cssnano] : [autoprefixer];\n\n    return postcss(plugins).process(result.css, {\n      from: options.source,\n      to: options.destination,\n      map: options.sourceMap && {inline: false},\n      prev: result.map,\n    });\n  };\n};\n\n/**\n * @param {RenderOptions} options - The render options.\n * @returns {function(!object): postcss.LazyResult} - The bound function.\n */\nconst writeCssAndMap = function writeCssAndMap(options) {\n  return function boundWriteCssAndMap(result) {\n    /* eslint-disable-next-line compat/compat */\n    return new Promise(function writeFiles(resolve) {\n      if (options.dryRun === false) {\n        fs.writeFileSync(options.destination, result.css, 'utf8');\n\n        if (options.sourceMap && result.map) {\n          const mapFile = typeof options.sourceMap === 'string' ? options.sourceMap : `${options.destination}.map`;\n          fs.writeFileSync(mapFile, result.map, 'utf8');\n        }\n      }\n\n      return resolve(result);\n    });\n  };\n};\n\n/**\n * @typedef {!object} RenderOptions\n * @property {string} source\n * @property {string} destination\n * @property {(string|boolean)} sourceMap\n * @property {(string|boolean)} minify\n * @property {boolean} dryRun\n * @property {boolean} noFix\n */\n\nconst normalizeOptions = function normalizeOptions(options) {\n  const name = path.basename(options.source, '.less');\n  const dirname = path.dirname(options.source);\n\n  return {\n    source: options.source,\n    destination: options.destination || path.join(dirname, `${name}.css`),\n    sourceMap: options.sourceMap || false,\n    minify: options.minify || false,\n    dryRun: Boolean(options.dryRun),\n    noFix: Boolean(options.noFix),\n  };\n};\n\n/**\n * @param {RenderOptions} options - The render options.\n * @returns {Promise<postcss.LazyResult>} - The render process Promise.\n */\nconst render = function render(options) {\n  const opts = normalizeOptions(options);\n  const source = fs.readFileSync(opts.source, 'utf8');\n\n  return performLessFixes(source, opts)\n    .then(renderLessToCss(opts))\n    .then(performPostcss(opts))\n    .then(writeCssAndMap(opts));\n};\n\nexport default render;\n"]}